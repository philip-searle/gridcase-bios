
# Link script for GRiD 1520 BIOS

input {
	files => [
		../src/build/rom_header.obj
		../src/build/reset.obj
		../src/build/reset.obj
		../src/build/reset_utils.obj
		../src/build/post/vidtest.obj
		../src/build/post/kbc.obj
		../src/build/post/timer.obj
		../src/build/post/protmode.obj
		../src/build/int19.obj
		../src/build/int18.obj
		../src/build/int13_at.obj
		../src/build/int13_grid.obj
		../src/build/int14.obj
		../src/build/int16.obj
		../src/build/int9.obj
		../src/build/kbxlat.obj
		../src/build/keyboard.obj
		../src/build/kbc_286.obj
		../src/build/int13_fd.obj
		../src/build/fd_int13_handlers.obj
		../src/build/fd_std_dpbs.obj
		../src/build/fd_bda.obj
		../src/build/fd_commands.obj
		../src/build/fd_controller.obj
		../src/build/fd_misc.obj
		../src/build/int17.obj
		../src/build/int10.obj
		../src/build/int12.obj
		../src/build/int11.obj
		../src/build/int15.obj
		../src/build/rtc.obj
		../src/build/misc.obj
		../src/build/kb_extra.obj
		../src/build/int75.obj
		../src/build/int71.obj
		../src/build/isr.obj
		../src/build/lightpen.obj
		../src/build/cmos.obj
		../src/build/prntscrn.obj
		../src/build/int13_xt.obj
		../src/build/grid_cpu.obj
		../src/build/grid_autodetect.obj
		../src/build/grid_fd.obj
		../src/build/grid_vid.obj
		../src/build/int15_grid.obj
		../src/build/grid_vid2.obj
		../src/build/sysident.obj
		../src/build/at_compat.obj
		../src/build/grid_pw.obj
		../src/build/rom_trailer.obj
	]
}

output {
	bin => ../src/build/bios.bin
	map => ../src/build/bios.map
}

linker {
	define => {
		EoiPic1					=> F000:F53C
		EoiPic1and2				=> F000:F543
		DetectMemController		=> F000:F63D
		PwEnabled				=> F000:F180
		PwStartInput			=> F000:F1F2
		PwPrompt				=> F000:F422
		PwProcessInput			=> F000:F37B
		PwEndInput				=> F000:F1D2
		PwCompareStored			=> F000:F23A
		PwBackdoor2				=> F000:F291
		PwIncorrect				=> F000:F2D8
		PwClearBuffer			=> F000:F27A
		GridBootRom				=> F000:D88A
		DriveIdentify			=> F000:F56F
		IsExtFdIndex			=> F000:D92C
		VidWinSelect			=> F000:B637
		WaitHdSpinUp			=> F000:F685
	}
	script => [
		advance	{ to 		=> 0000:0000											}
		link	{ input		=> .*,					segment	=> IVT,	virtual	=> true	}
		advance	{ to		=> 0040:0000											}
		link	{ input		=> .*,					segment	=> BDA,	virtual => true	}

		advance	{ to		=> F000:8000											}
		link	{ input		=> rom_header,			segment => CODE					}
		link	{ input		=> reset,				segment => CODE					}
		link	{ input		=> post_reset_util,		segment => CODE					}
		link	{ input		=> post_vidtest,		segment => CODE					}
		link	{ input		=> post_kbc,			segment => CODE					}
		link	{ input		=> post_timer,			segment => CODE					}
		link	{ input		=> post_protmode,		segment => CODE					}
		link	{ input		=> int19,				segment => CODE					}
		link	{ input		=> int18,				segment => CODE					}
		link	{ input		=> int13_at,			segment => CODE					}
		link	{ input		=> int13_grid,			segment => CODE					}
		link	{ input		=> int14,				segment => CODE					}
		link	{ input		=> int16,				segment => CODE					}
		link	{ input		=> int9,				segment => CODE					}
		link	{ input		=> kbxlat,				segment => CODE					}
		link	{ input		=> keyboard,			segment => CODE					}
		link	{ input		=> kbc_286,				segment => CODE					}
		link	{ input		=> int13_fd,			segment => CODE					}
		link	{ input		=> fd_int13_handle,		segment => CODE					}
		link	{ input		=> fd_std_dpbs,			segment => CODE					}
		link	{ input		=> fd_bda,				segment => CODE					}
		link	{ input		=> fd_commands,			segment => CODE					}
		link	{ input		=> fd_controller,		segment => CODE					}
		link	{ input		=> fd_misc,				segment => CODE					}
		link	{ input		=> int17,				segment => CODE					}
		link	{ input		=> int10,				segment => CODE					}
		link	{ input		=> int12,				segment => CODE					}
		link	{ input		=> int11,				segment => CODE					}
		link	{ input		=> int15,				segment => CODE					}
		link	{ input		=> rtc,					segment => CODE					}
		link	{ input		=> misc,				segment => CODE					}
		link	{ input		=> kb_extra,			segment => CODE					}
		link	{ input		=> int75,				segment => CODE					}
		link	{ input		=> int71,				segment => CODE					}
		link	{ input		=> isr,					segment => CODE					}
		link	{ input		=> misc,				segment => CODE2				}
		link	{ input		=> lightpen,			segment => CODE					}
		link	{ input		=> cmos,				segment => CODE					}
		link	{ input		=> prntscrn,			segment => CODE					}
		link	{ input		=> int13_xt,			segment => CODE					}
		link	{ input		=> grid_cpu,			segment => CODE					}
		link	{ input		=> grid_autodetect,		segment => CODE					}
		link	{ input		=> grid_fd,				segment => CODE					}
		link	{ input		=> grid_vid,			segment => CODE					}
		link	{ input		=> int15_grid,			segment => CODE					}
		link	{ input		=> grid_vid2,			segment => CODE					}

		fill	{ to		=> F000:DFD0,			with => 0xFF					}
		link	{ input		=> sysident,			segment => CODE					}
		#fill	{ to		=> F000:E000,			with => 0xFF					}
		link	{ input		=> at_compat,			segment => CODE					}
		link	{ input		=> grid_pw,				segment => CODE					}
		fill	{ to		=> F000:F841			with => 0xFF					}
		link	{ input		=> at_compat,			segment => CODE2				}
		link	{ input		=> rom_trailer,			segment => CODE					}
		end		{ }
	]
	assert => {
		Reset_Actual	= FFFF:FFF0
	}
}
